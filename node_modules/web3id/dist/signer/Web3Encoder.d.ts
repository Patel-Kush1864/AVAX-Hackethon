/**
 * 	@class Web3Encoder
 */
export declare class Web3Encoder {
    /**
     *	@param obj		{Record<string, any>}
     *	@param exceptedKeys	{Array<string>}
     *	@returns {Promise<string>}
     */
    static encode(obj: Record<string, any>, exceptedKeys?: Array<string>): Promise<string>;
    /**
     *	@param encodedMessage	{string}
     *	@returns {Promise<Record<string, any>>}
     */
    static decode(encodedMessage: string): Promise<Record<string, any>>;
    /**
     * 	determine whether the key of an object is of string type
     *	@param obj
     *	@param key
     *	@returns {boolean}
     */
    static isStringKey(obj: object, key: string): obj is Record<string, any>;
    /**
     *	@param obj		{ Record<string, any> }
     *	@param keysToRemove	{ Array<string> }
     *	@returns { Record<string, any> }
     */
    static removeObjectKeys(obj: Record<string, any>, keysToRemove: Array<string>): Record<string, any>;
    /**
     *	@param obj		{Record<string, any>}
     *	@param reservedKeys	{Array<string>}
     *	@returns {Record<string, any>}
     */
    static reserveObjectKeys(obj: Record<string, any>, reservedKeys: Array<string>): Record<string, any>;
    /**
     *	@param obj	{*}
     *	@returns {*}
     */
    static sortObjectByKeys<T extends object>(obj: T): T | Array<any>;
}
//# sourceMappingURL=Web3Encoder.d.ts.map