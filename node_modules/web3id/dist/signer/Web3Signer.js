"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3Signer = void 0;
const ethers_1 = require("ethers");
const Web3Encoder_1 = require("./Web3Encoder");
const EtherWallet_1 = require("./EtherWallet");
const lodash_1 = __importDefault(require("lodash"));
/**
 * 	@class Web3Signer
 */
class Web3Signer {
    /**
     *	@param privateKey	{ string | SigningKey }
     *	@param obj		{ any }
     *	@param exceptedKeys	{ Array<string> }
     *	@returns {Promise<string>}
     */
    static signObject(privateKey, obj, exceptedKeys) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                if (!privateKey) {
                    return reject(`invalid privateKey`);
                }
                if (!obj) {
                    return reject(`invalid obj`);
                }
                if (!EtherWallet_1.EtherWallet.isValidAddress(obj.wallet)) {
                    return reject(`invalid obj.wallet`);
                }
                const message = yield Web3Encoder_1.Web3Encoder.encode(obj, exceptedKeys);
                const sig = yield this.signMessage(privateKey, message);
                //	...
                resolve(sig);
            }
            catch (err) {
                reject(err);
            }
        }));
    }
    /**
     *	@param privateKey	{ string | SigningKey }
     *	@param message		{ string | Uint8Array }
     *	@returns {Promise<string>}
     */
    static signMessage(privateKey, message) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                if (!privateKey) {
                    return reject(`invalid privateKey`);
                }
                if (!message) {
                    return reject(`invalid message`);
                }
                const signWallet = new ethers_1.ethers.Wallet(privateKey);
                const sig = yield signWallet.signMessage(message);
                //	...
                resolve(sig.trim().toLowerCase());
            }
            catch (err) {
                reject(err);
            }
        }));
    }
    /**
     *	@param sig	{any}
     *	@returns {boolean}
     */
    static isValidSig(sig) {
        return lodash_1.default.isString(sig) && !lodash_1.default.isEmpty(sig) && (0, ethers_1.isHexString)(sig, 65);
    }
}
exports.Web3Signer = Web3Signer;
//# sourceMappingURL=Web3Signer.js.map